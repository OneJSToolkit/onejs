import ViewModel = require('ViewModel');
import EventGroup = require('EventGroup');
declare class View {
    public viewName: string;
    public viewModelType: any;
    public id: string;
    public element: HTMLElement;
    public parent: View;
    public owner: View;
    public children: View[];
    public events: EventGroup;
    public activeEvents: EventGroup;
    public subElements: any;
    public _viewModel: ViewModel;
    public _inheritedModel: ViewModel;
    public _bindings: any[];
    public _lastValues: {};
    public _hasChanged: boolean;
    public _isEvaluatingView: boolean;
    public _state: number;
    static _instanceCount: number;
    constructor(viewModel?: ViewModel);
    public dispose(): void;
    public onInitialize(): void;
    public onRenderElement(): void;
    public onResize(): void;
    public onActivate(): void;
    public onDeactivate(): void;
    public onViewModelChanged(changeArgs?: any): void;
    public setData(data: any, forceUpdate?: boolean): void;
    public initialize(): void;
    public renderElement(): HTMLElement;
    public activate(): void;
    public deactivate(): void;
    public resize(): void;
    public addChild(view: View, owner?: View): View;
    public removeChild(view: View): View;
    public clearChildren(): void;
    public evaluateView(changeArgs?: any): void;
    public updateView(updateValuesOnly?: boolean): void;
    public _updateViewValue(binding: any, bindingType: any, sourcePropertyName: any, updateValuesOnly?: boolean, bindingDest?: any): void;
    public getViewModel(): any;
    public getValue(propertyName: string): any;
    public setValue(propertyName: string, propertyValue: any): void;
    public _getPropTarget(propertyName: any): {
        originView: View;
        view: View;
        viewModel: any;
        target: any;
        propertyName: any;
    };
    public _getRoot(): View;
    public _ce(tagName: string, attributes?: string[], binding?: any, children?: any[]): HTMLElement;
    public _ct(val: string): Text;
    public _bindEvents(): void;
    public _bindInputEvent(element: any, binding: any): void;
    public _bindEvent(element: any, eventName: any, targetList: any): void;
    public toggle(propertyName: string): boolean;
    public send(sourcePropertyName: any, destinationPropertyName: any): void;
}
export = View;
